// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TypeTracker {
  CREATE
  UPDATE
  DISABLE
  RECOVER
}

enum PointTracker {
  instansi
  user
  mapel
  elemen
  cp
  bidang
  program
  konsentrasi
  tp
  teacher
  kelas
  murid
  jadwal
  // perangkat
}

model Tracker {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  point         PointTracker
  type          TypeTracker
  user          User                 @relation(fields: [userId], references: [id])
  userId        String               @db.ObjectId
  ref           Instansi             @relation("Trackers", fields: [refId], references: [id])
  refId         String               @db.ObjectId
  instansi      Instansi?            @relation("TrackerHistory", fields: [instansiId], references: [id])
  instansiId    String?              @db.ObjectId
  createdAt     DateTime             @default(now())
  mapel         MataPelajaran?       @relation(fields: [mapelId], references: [id])
  mapelId       String?              @db.ObjectId
  elemen        Element?             @relation(fields: [elementId], references: [id])
  elementId     String?              @db.ObjectId
  cp            Achievement?         @relation(fields: [cpId], references: [id])
  cpId          String?              @db.ObjectId
  bidang        BidangKeahlian?      @relation(fields: [bidangId], references: [id])
  bidangId      String?              @db.ObjectId
  program       ProgramKeahlian?     @relation(fields: [programId], references: [id])
  programId     String?              @db.ObjectId
  konsentrasi   KonsentrasiKeahlian? @relation(fields: [konsentrasiId], references: [id])
  konsentrasiId String?              @db.ObjectId
  tp            SchoolYear?          @relation(fields: [tpId], references: [id])
  tpId          String?              @db.ObjectId
  teacher       Teacher?             @relation(fields: [teacherId], references: [id])
  teacherId     String?              @db.ObjectId
  kelas         ClassRoom?           @relation(fields: [kelasId], references: [id])
  kelasId       String?              @db.ObjectId
  murid         Student?             @relation(fields: [muridId], references: [id])
  muridId       String?              @db.ObjectId
  jadwal        Schedule?            @relation(fields: [jadwalId], references: [id])
  jadwalId      String?              @db.ObjectId

  @@index([userId])
  @@index([instansiId])
}

type Coordinate {
  longitude Float
  latitude  Float
}

type Address {
  provinsi   String
  kabupaten  String
  kecamatan  String
  kelurahan  String
  kodepos    String
  coordinate Coordinate
}

enum Level {
  SD
  SMP
  SMA
  SMK
}

model Instansi {
  id         String                @id @default(auto()) @map("_id") @db.ObjectId
  npsn       String                @unique
  name       String
  isPrivate  Boolean
  address    Address
  level      Level
  religion   Religion?
  major      Boolean?
  majors     KonsentrasiKeahlian[] @relation(fields: [majorIds], references: [id])
  majorIds   String[]              @db.ObjectId
  role       Role[]
  schoolYear SchoolYear[]
  teacher    Teacher[]
  student    Student[]
  tracker    Tracker[]             @relation("TrackerHistory")
  history    Tracker[]             @relation("Trackers")
  disable    Boolean               @default(false)

  @@index([disable])
}

enum Fase {
  A
  B
  C
  D
  E
  F
  FP
}

enum Religion {
  Islam
  Kristen
  Katolik
  Hindu
  Buddha
  Khonghucu
}

model MataPelajaran {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  no         String
  code       String
  name       String
  religion   Religion?
  vocational Boolean
  element    Element[]
  schedule   Schedule[]
  tracker    Tracker[]
  disable    Boolean    @default(false)

  @@unique([code, name], name: "nameMapel")
  @@index([no])
  @@index([disable])
}

model Element {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  no               Int
  name             String
  description      String
  achievement      Achievement[]
  mapel            MataPelajaran   @relation(fields: [mapelId], references: [id])
  mapelId          String          @db.ObjectId
  tracker          Tracker[]
  disable          Boolean         @default(false)
  scheduleClass    ScheduleClass[] @relation(fields: [scheduleClassIds], references: [id])
  scheduleClassIds String[]        @db.ObjectId

  @@unique([mapelId, name], name: "nameElement")
  @@index([disable])
}

model Achievement {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  no          Int
  fase        Fase      @default(A)
  description String
  element     Element   @relation(fields: [elementId], references: [id])
  elementId   String    @db.ObjectId
  tracker     Tracker[]
  disable     Boolean   @default(false)

  @@unique([elementId, fase], name: "nameCP")
  @@index([disable])
}

model BidangKeahlian {
  id      String            @id @default(auto()) @map("_id") @db.ObjectId
  code    String
  name    String
  program ProgramKeahlian[]
  tracker Tracker[]
  disable Boolean           @default(false)

  @@unique([code, name], name: "nameBidang")
  @@index([disable])
}

model ProgramKeahlian {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  code        String
  name        String
  bidang      BidangKeahlian        @relation(fields: [bidangId], references: [id])
  bidangId    String                @db.ObjectId
  konsentrasi KonsentrasiKeahlian[]
  tracker     Tracker[]
  disable     Boolean               @default(false)

  @@unique([code, name], name: "nameProgram")
  @@index([disable])
}

model KonsentrasiKeahlian {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  code        String
  name        String
  program     ProgramKeahlian @relation(fields: [programId], references: [id])
  programId   String          @db.ObjectId
  tahun       Int
  student     Student[]
  instansi    Instansi[]      @relation(fields: [instansiIds], references: [id])
  instansiIds String[]        @db.ObjectId
  classRoom   ClassRoom[]
  tracker     Tracker[]
  disable     Boolean         @default(false)

  @@unique([programId, name], name: "nameKonsentrasi")
  @@index([disable])
}

enum Roles {
  SU
  GURU
  STAF
  SISWA
}

model Role {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  key        Roles
  instansi   Instansi @relation(fields: [instansiId], references: [id])
  instansiId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  users      User[]

  @@unique([instansiId, key], name: "nameRole")
}

type Google {
  scopes    String[]
  tokens    Json
  createdAt DateTime
  updatedAt DateTime
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  picture  String?
  username String    @unique
  active   Boolean
  verify   Boolean   @default(false)
  password String
  passhash String
  role     Role?     @relation(fields: [roleId], references: [id])
  roleId   String?   @db.ObjectId
  auth     Auth?
  tracker  Tracker[]
  disable  Boolean   @default(false)
  google   Google?

  @@index([disable])
}

enum UploadType {
  DRIVE
  STORAGE
}

model Upload {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  type UploadType
  name String
  url  String
}

enum Gender {
  L
  P
}

enum TypePersonal {
  ADMIN
  GURU
  SISWA
  IBU
  AYAH
  WALI
}

type Born {
  place String
  date  DateTime
}

enum LevelEdu {
  SD
  SMP
  SMA
  D1
  D2
  D3
  D4
  S1
  S2
  S3
}

type Education {
  instansi   String
  level      LevelEdu
  major      String?
  year       Int
  attachment String?
}

type Training {
  name       String
  instansi   String
  long       Int
  year       Int
  place      String
  attachment String?
}

type Profession {
  name       String
  instansi   String
  year       Int
  attachment String?
}

type Employment {
  position String
  year     Int
  place    String
  note     String?
}

type Overseas {
  country    String
  instansi   String
  objective  String
  long       Int
  year       Int
  attachment String?
}

type Scientific {
  name       String
  instansi   String
  position   String
  place      String
  period     String
  attachment String?
}

type Organization {
  name     String
  position String
  period   String
  leader   String
  place    String
}

type Research {
  name       String
  year       Int
  position   String
  fund       String
  attachment String?
}

type Papers {
  name      String
  year      Int
  published String
}

type Innovation {
  name   String
  year   Int
  patent Boolean
}

type Award {
  name       String
  year       Int
  instansi   String
  attachment String?
}

type SourcePerson {
  name       String
  date       String
  instansi   String
  note       String?
  attachment String?
}

type Contest {
  name       String
  date       String
  instansi   String
  level      String
  attachment String?
}

type Documents {
  name       String
  date       String
  instansi   String
  note       String?
  attachment String?
}

type Additional {
  position   String
  date       String
  instansi   String
  note       String?
  attachment String?
}

model Personal {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  nik          String?
  nisn         String?
  type         TypePersonal
  auth         Auth?
  fullname     String
  gender       Gender
  foreign      Boolean
  country      String?
  religion     Religion
  born         Born
  email        String
  belajarId    String?
  nophone      String
  isLife       Boolean?
  address      Address?
  father       FamilyTree[]     @relation("FamilyTreeFather")
  mother       FamilyTree[]     @relation("FamilyTreeMother")
  wali         FamilyTree[]     @relation("FamilyTreeWali")
  couple       FamilyTree[]     @relation("FamilyTreeCouple")
  child        FamilyTreeChild?
  student      Student[]
  teacher      Teacher[]
  education    Education[]
  training     Training[]
  employment   Employment[]
  profession   Profession[]
  overseas     Overseas[]
  scientific   Scientific[]
  organization Organization[]
  papers       Papers[]
  innovation   Innovation[]
  award        Award[]
  sourcePerson SourcePerson[]
  contest      Contest[]
  documents    Documents[]
  additional   Additional[]
  disable      Boolean          @default(false)

  @@index([disable])
}

model Auth {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique @db.ObjectId
  personal   Personal @relation(fields: [personalId], references: [id])
  personalId String   @unique @db.ObjectId

  @@unique([userId, personalId], name: "AuthUserPersonal")
}

model FamilyTree {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  nokk     String
  father   Personal?         @relation("FamilyTreeFather", fields: [fatherId], references: [id])
  fatherId String?           @db.ObjectId
  mother   Personal?         @relation("FamilyTreeMother", fields: [motherId], references: [id])
  motherId String?           @db.ObjectId
  wali     Personal?         @relation("FamilyTreeWali", fields: [waliId], references: [id])
  waliId   String?           @db.ObjectId
  couple   Personal?         @relation("FamilyTreeCouple", fields: [coupleId], references: [id])
  coupleId String?           @db.ObjectId
  childs   FamilyTreeChild[]
  address  Address
}

enum ChildType {
  KANDUNG
  TIRI
  ANGKAT
}

model FamilyTreeChild {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  no         Int
  type       ChildType
  kk         FamilyTree @relation(fields: [kkId], references: [id])
  kkId       String     @db.ObjectId
  personal   Personal   @relation(fields: [personalId], references: [id])
  personalId String     @unique @db.ObjectId
}

type Organizational {
  kepsek  String  @db.ObjectId
  wakasek String  @db.ObjectId
  wakakur String  @db.ObjectId
  wakasiw String  @db.ObjectId
  wakapra String  @db.ObjectId
  wakahum String? @db.ObjectId
}

model SchoolYear {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  year           Int
  instansi       Instansi       @relation(fields: [instansiId], references: [id])
  instansiId     String         @db.ObjectId
  organizational Organizational
  classRoom      ClassRoom[]
  students       Student[]
  calendar       Calendar[]
  schedule       Schedule[]
  tracker        Tracker[]
  disable        Boolean        @default(false)

  @@unique([instansiId, year], name: "eSchoolYear")
  @@index([disable])
}

model Teacher {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  personal      Personal        @relation(fields: [personalId], references: [id])
  personalId    String          @db.ObjectId
  classRoom     ClassRoom[]
  instansi      Instansi        @relation(fields: [instansiId], references: [id])
  instansiId    String          @db.ObjectId
  event         Calendar[]      @relation(fields: [eventIds], references: [id])
  eventIds      String[]        @db.ObjectId
  nip           String?
  nrg           String?
  noKarpeg      String?
  tmtTugas      DateTime?
  tmtGol        DateTime?
  position      String?
  rank          String?
  period        String?
  certificate   String?
  tracker       Tracker[]
  disable       Boolean         @default(false)
  scheduleClass ScheduleClass[]

  @@unique([personalId, instansiId], name: "teachIn")
  @@index([disable])
}

type RoomProperty {
  pkl Boolean @default(false)
}

model ClassRoom {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  year          SchoolYear           @relation(fields: [yearId], references: [id])
  yearId        String               @db.ObjectId
  wali          Teacher              @relation(fields: [waliId], references: [id])
  waliId        String               @db.ObjectId
  level         Int
  property      RoomProperty
  major         KonsentrasiKeahlian? @relation(fields: [majorId], references: [id])
  majorId       String?              @db.ObjectId
  students      Student[]            @relation(fields: [studentIds], references: [id])
  studentIds    String[]             @db.ObjectId
  event         Calendar[]           @relation(fields: [eventIds], references: [id])
  eventIds      String[]             @db.ObjectId
  disable       Boolean              @default(false)
  tracker       Tracker[]
  scheduleClass ScheduleClass[]

  @@unique([yearId, name], name: "nameClassRoom")
  @@index([disable])
}

model Student {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  nis          String
  nisn         String
  personal     Personal             @relation(fields: [personalId], references: [id])
  personalId   String               @db.ObjectId
  major        KonsentrasiKeahlian? @relation(fields: [majorId], references: [id])
  majorId      String?              @db.ObjectId
  classRoom    ClassRoom[]          @relation(fields: [classRoomIds], references: [id])
  classRoomIds String[]             @db.ObjectId
  startYear    SchoolYear           @relation(fields: [startYearId], references: [id])
  startYearId  String               @db.ObjectId
  instansi     Instansi             @relation(fields: [instansiId], references: [id])
  instansiId   String               @db.ObjectId
  event        Calendar[]           @relation(fields: [eventIds], references: [id])
  eventIds     String[]             @db.ObjectId
  tracker      Tracker[]
  disable      Boolean              @default(false)

  @@unique([personalId, instansiId], name: "studyIn")
  @@index([disable])
}

model Schedule {
  id      String          @id @default(auto()) @map("_id") @db.ObjectId
  year    SchoolYear      @relation(fields: [yearId], references: [id])
  yearId  String          @db.ObjectId
  mapel   MataPelajaran   @relation(fields: [mapelId], references: [id])
  mapelId String          @db.ObjectId
  disable Boolean         @default(false)
  tracker Tracker[]
  mapping ScheduleClass[]

  @@unique([yearId, mapelId])
  @@index([disable])
}

model ScheduleClass {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  ref         Schedule  @relation(fields: [refId], references: [id])
  refId       String    @db.ObjectId
  hours       Int
  isEven      Boolean
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  teacherId   String    @db.ObjectId
  classRoom   ClassRoom @relation(fields: [classRoomId], references: [id])
  classRoomId String    @db.ObjectId
  elemen      Element[] @relation(fields: [elemenIds], references: [id])
  elemenIds   String[]  @db.ObjectId

  @@unique([isEven, refId, classRoomId])
}

// enum TypeTimeSheet {
//   CLASS
// }

// model TimeSheet {
//   id          String      @id @default(auto()) @map("_id") @db.ObjectId
//   date        DateTime
// }

model Calendar {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  ref          SchoolYear  @relation(fields: [refId], references: [id])
  refId        String      @db.ObjectId
  name         String
  description  String?
  start        DateTime
  end          DateTime?
  color        String
  classRoom    ClassRoom[] @relation(fields: [classRoomIds], references: [id])
  classRoomIds String[]    @db.ObjectId
  student      Student[]   @relation(fields: [studentIds], references: [id])
  studentIds   String[]    @db.ObjectId
  teacher      Teacher[]   @relation(fields: [teacherIds], references: [id])
  teacherIds   String[]    @db.ObjectId
}
